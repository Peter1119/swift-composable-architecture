@Tutorial(time: 20) { 
  @Intro(title: "Your first feature") {
    Learn how to create a reducer to implement the logic and behavior of a feature, and then 
    learn how to hook up that feature to a SwiftUI view.
    
    리듀서를 생성하여 기능의 로직과 동작을 구현하는 방법을 배우고, 
    그 기능을 SwiftUI 뷰에 연결하는 방법을 배워보겠습니다.
  }
  
  @Section(title: "Create a reducer") {
    @ContentAndMedia {
      The fundamental unit that features are built with in the Composable Architecture is the
      ``ComposableArchitecture/Reducer()`` macro and ``ComposableArchitecture/Reducer`` protocol. A
      conformance to that protocol represents the logic and behavior for a feature in your
      application. This includes how to evolve the current state to the next state when an action is
      sent into the system, and how effects communicate with the outside world and feed data back
      into the system.
      
      And most importantly, the feature's core logic and behavior can be built in full isolation
      with no mention of a SwiftUI view, which makes it easier to develop in isolation, easier
      to reuse, and easier to test.
      
      Composable Architecture에서 기능을 구축하는 기본 단위는 ``ComposableArchitecture/Reducer()`` 매크로와 
      ``ComposableArchitecture/Reducer`` 프로토콜입니다. 이 프로토콜을 준수하는 것은 애플리케이션의 기능에 대한 
      로직과 동작을 나타냅니다. 여기에는 액션이 시스템에 전송될 때 현재 상태를 다음 상태로 발전시키는 방법과 
      이펙트가 외부 세계와 통신하고 데이터를 시스템으로 다시 피드백하는 방법이 포함됩니다.

      가장 중요한 것은, 기능의 핵심 로직과 동작을 SwiftUI 뷰에 대한 언급 없이 완전히 격리된 상태로 구축할 수 
      있다는 것입니다. 이는 개발을 더 쉽게 하고, 재사용이 용이하며, 테스트하기도 쉽게 만듭니다.

      카운터의 로직을 캡슐화하는 간단한 리듀서를 만드는 것부터 시작해보겠습니다. 나중에 더 흥미로운 동작들을 
      추가할 것이지만, 지금은 간단하게 시작해보겠습니다.
    }
    @Steps {
      @Step {
        Create a new Swift file named CounterFeature.swift and import the Composable Architecture.
        
        CounterFeature.swift라는 새로운 Swift 파일을 생성하고 Composable Architecture를 임포트합니다.

        @Code(name: "CounterFeature.swift", file: 01-01-01-code-0001.swift)
        
        > Note: Before importing the library you will need to depend on it by [adding it to your 
        Xcode project settings or SPM package](http://github.com/pointfreeco/swift-composable-architecture#Installation).
        
        > 참고: 라이브러리를 임포트하기 전에 [Xcode 프로젝트 설정이나 SPM 패키지에 추가](http://github.com/pointfreeco/swift-composable-architecture#Installation)하여 
        의존성을 설정해야 합니다.
      }
      
      @Step {
        Define a new struct called `CounterFeature`, and annotate it with the
        ``ComposableArchitecture/Reducer()`` macro.
        
        `CounterFeature`라는 새로운 구조체를 정의하고 ``ComposableArchitecture/Reducer()`` 매크로로 
        어노테이션을 추가합니다.
        
        > Note: The ``ComposableArchitecture/Reducer()`` macro does a few things for you, but at
        > this point you only need to know that it extends your type to conform to the 
        > ``ComposableArchitecture/Reducer`` protocol.
        
        > 참고: ``ComposableArchitecture/Reducer()`` 매크로는 여러 가지 작업을 수행하지만, 
        > 현재로서는 이 매크로가 타입을 확장하여 ``ComposableArchitecture/Reducer`` 프로토콜을 
        > 준수하게 만든다는 것만 알면 됩니다.
        
        @Code(name: "CounterFeature.swift", file: 01-01-01-code-0002.swift)
      }
      
      @Step {
        To conform to ``ComposableArchitecture/Reducer`` you will start with a domain 
        modeling exercise. You will create a `State` type that holds the state your feature needs 
        to do its job, typically a struct. Then you will create an `Action` type that holds all 
        the actions the user can perform in the feature, typically an enum. 
        
        ``ComposableArchitecture/Reducer``를 준수하기 위해 도메인 모델링 작업부터 시작합니다. 
        기능이 작업을 수행하는 데 필요한 상태를 보관하는 `State` 타입(일반적으로 구조체)을 만듭니다. 
        그런 다음 사용자가 기능에서 수행할 수 있는 모든 액션을 보관하는 `Action` 타입(일반적으로 열거형)을 
        만듭니다.

        Further, if your feature is to be observed by SwiftUI, which is usually the case, you must
        annotate its state with the ``ComposableArchitecture/ObservableState()`` macro. It is the
        Composable Architecture's version of `@Observable`, but tuned to value types.
        
        또한, 기능이 SwiftUI에 의해 관찰되어야 하는 경우(일반적인 경우), 상태에 
        ``ComposableArchitecture/ObservableState()`` 매크로로 어노테이션을 추가해야 합니다. 
        이는 Composable Architecture 버전의 `@Observable`이지만 값 타입에 맞게 조정되어 있습니다.

        @Code(name: "CounterFeature.swift", file: 01-01-01-code-0003.swift)
      }
            
      @Step {
        For the purpose of a simple counter feature, the state consists of just a single integer,
        the current count, and the actions consist of tapping buttons to either increment or 
        decrement the count.
        
        간단한 카운터 기능을 위해, 상태는 현재 카운트를 나타내는 단일 정수로만 구성되며, 
        액션은 카운트를 증가시키거나 감소시키는 버튼 탭으로 구성됩니다.

        > Tip: It is best to name the `Action` cases after literally what the user does in the UI,
        > such as `incrementButtonTapped`, rather than what logic you want to perform, such as 
        > `incrementCount`.
        
        > 팁: `Action` 케이스의 이름은 `incrementCount`와 같이 수행하고자 하는 로직보다는 
        > `incrementButtonTapped`처럼 사용자가 UI에서 실제로 하는 행동을 그대로 표현하는 것이 좋습니다.
        
        @Code(name: "CounterFeature.swift", file: 01-01-01-code-0004.swift)
      }
      
      @Step {
        And finally, to finish conforming to ``ComposableArchitecture/Reducer``, you must implement
        a ``ComposableArchitecture/Reducer/body-20w8t`` property with a
        ``ComposableArchitecture/Reduce`` reducer that evolves the state from its current value to
        the next value given a user action, and returns any effects that the feature wants to
        execute in the outside world. This almost always begins by switching on the incoming action
        to determine what logic you need to perform, and the `state` is provided as `inout` so you
        can perform mutations on it directly.
        
        마지막으로, ``ComposableArchitecture/Reducer`` 준수를 완료하기 위해 
        ``ComposableArchitecture/Reducer/body-20w8t`` 프로퍼티를 구현해야 합니다. 이는 
        ``ComposableArchitecture/Reduce`` 리듀서를 사용하여 사용자 액션에 따라 현재 상태 값을 다음 값으로 
        발전시키고, 기능이 외부 세계에서 실행하고자 하는 이펙트를 반환합니다. 이는 거의 항상 들어오는 액션에 
        대한 switch문으로 시작하여 수행해야 할 로직을 결정하며, `state`는 `inout`으로 제공되어 직접 
        변경할 수 있습니다.

        > Note: A reducer is implemented by providing a 
        > ``ComposableArchitecture/Reducer/body-20w8t`` property, and then listing the 
        > reducers inside that you want to compose. Right now we only have one reducer we want to
        > run, and so a simple ``ComposableArchitecture/Reduce`` is sufficient, but it is more
        > typical to compose many reducers together, and that will be shown later in the tutorial.
        
        > 참고: 리듀서는 ``ComposableArchitecture/Reducer/body-20w8t`` 프로퍼티를 제공하고 
        > 구성하고자 하는 리듀서들을 내부에 나열하여 구현됩니다. 현재는 실행하고자 하는 리듀서가 하나뿐이므로 
        > 간단한 ``ComposableArchitecture/Reduce``로 충분하지만, 일반적으로는 여러 리듀서를 함께 구성하며, 
        > 이는 튜토리얼 후반부에서 다룰 예정입니다.
        
        @Code(name: "CounterFeature.swift", file: 01-01-01-code-0005.swift)
      }
      
      @Step {
        The logic for this feature is quite simple. We just want to either subtract one or add one
        to the state's count. We must also return a value of ``ComposableArchitecture/Effect`` 
        that represents the effect to be executed in the outside world, but in this case we do not 
        need to execute anything. So we can return a special
        ``ComposableArchitecture/Effect/none`` value to represent we have no effects to
        execute.
        
        이 기능의 로직은 매우 간단합니다. 상태의 카운트에서 1을 빼거나 더하기만 하면 됩니다. 
        또한 외부 세계에서 실행될 이펙트를 나타내는 ``ComposableArchitecture/Effect`` 값을 반환해야 하지만, 
        이 경우에는 실행할 것이 없습니다. 따라서 실행할 이펙트가 없음을 나타내는 특별한 
        ``ComposableArchitecture/Effect/none`` 값을 반환할 수 있습니다.
        
        @Code(name: "CounterFeature.swift", file: 01-01-01-code-0006.swift)
      }
      
      That is all it takes to implement a _very_ basic feature in the Composable Architecture.
      There is of course a lot more to know about, such as executing effects and feeding data
      back into the system, using dependencies in reducers, composing multiple reducers together, 
      and a lot more. But we will stop here for this feature right now and move onto the view.
      
      이것이 Composable Architecture에서 _매우_ 기본적인 기능을 구현하는 데 필요한 전부입니다.
      물론 이펙트를 실행하고 데이터를 시스템으로 다시 피드백하는 것, 리듀서에서 의존성을 사용하는 것, 
      여러 리듀서를 함께 구성하는 것 등 알아야 할 것이 더 많이 있습니다. 하지만 지금은 여기서 멈추고 
      뷰로 넘어가보겠습니다.
    }
  }
    
  @Section(title: "Integrating with SwiftUI") {
    @ContentAndMedia {
      Now that we have a simple feature built as a reducer, we need to figure out how to power a 
      SwiftUI view from that feature. This involves a new concept, the
      ``ComposableArchitecture/Store``, which represents the runtime of the feature.
      
      이제 리듀서로 간단한 기능을 만들었으니, 이 기능으로 SwiftUI 뷰를 구동하는 방법을 알아보겠습니다. 
      여기에는 기능의 런타임을 나타내는 새로운 개념인 ``ComposableArchitecture/Store``가 관련됩니다.
    }
    @Steps {
      @Step {
        It is our personal preference to keep the reducer and view in the same file until it is
        untenable, but others prefer to split the types into their own files. For this tutorial
        we will continue putting everything in CounterFeature.swift, and we will now import SwiftUI
        and get a basic view into place.
        
        리듀서와 뷰를 관리하기 어려워질 때까지 같은 파일에 두는 것이 우리의 선호도이지만, 다른 사람들은 
        타입들을 각자의 파일로 분리하는 것을 선호합니다. 이 튜토리얼에서는 계속해서 모든 것을 
        CounterFeature.swift에 넣을 것이며, 이제 SwiftUI를 임포트하고 기본적인 뷰를 구성해보겠습니다.
        
        @Code(name: "CounterFeature.swift", file: 01-01-02-code-0001.swift)
      }
      
      @Step {
        The first thing one adds to the view is a ``ComposableArchitecture/Store`` that is generic
        over the reducer we constructed in the previous section. The `Store` represents the runtime
        of your feature. That is, it is the object that can process actions in order to update
        state, and it can execute effects and feed data from those effects back into the system.
        
        뷰에 가장 먼저 추가하는 것은 이전 섹션에서 구성한 리듀서를 제네릭으로 하는 ``ComposableArchitecture/Store``입니다. 
        `Store`는 기능의 런타임을 나타냅니다. 즉, 상태를 업데이트하기 위해 액션을 처리할 수 있고, 
        이펙트를 실행하고 그 이펙트로부터의 데이터를 시스템으로 다시 피드백할 수 있는 객체입니다.

        > Tip: The store can be held onto as a `let`. Observation of the data in the store happens
        > automatically with the ``ComposableArchitecture/ObservableState()`` macro.
        
        > 팁: store는 `let`으로 유지할 수 있습니다. store의 데이터 관찰은 
        > ``ComposableArchitecture/ObservableState()`` 매크로를 통해 자동으로 이루어집니다.
        
        @Code(name: "CounterFeature.swift", file: 01-01-02-code-0002.swift)
      }
      
      @Step {
        Next, we can implement some basic view hierarchy for displaying the count and providing 
        buttons for incrementing and decrementing. 
        
        다음으로, 카운트를 표시하고 증가 및 감소를 위한 버튼을 제공하는 기본적인 뷰 계층을 구현할 수 있습니다.

        @Code(name: "CounterFeature.swift", file: 01-01-02-code-0003.swift) {
          @Image(
            source: "01-02-image-0003.png", 
            alt: "iOS application showing a text view in the center displaying a 0 and two buttons underneath it, one for decrementing the count and one for incrementing."
          )
        }
      }
      
      With some basic view scaffolding in place we can now start actually reading state from, and
      sending actions to, the `store`.
      
      기본적인 뷰 구조가 준비되었으니 이제 실제로 `store`로부터 상태를 읽고 액션을 보내기 시작할 수 있습니다.
      
      @Step {  
        We can read a property of state directly from the `store` via dynamic member lookup,
        and we can send actions to the `store` via ``ComposableArchitecture/Store/send(_:)``.
        
        동적 멤버 조회를 통해 `store`로부터 직접 상태의 프로퍼티를 읽을 수 있으며,
        ``ComposableArchitecture/Store/send(_:)``를 통해 `store`에 액션을 보낼 수 있습니다.

        @Code(name: "CounterFeature.swift", file: 01-01-02-code-0004.swift)
      }
      
      @Step {
        Next we want to actually run the feature. We will start with a preview. To do this we will
        construct a `CounterView`, and to do that we need to construct a `StoreOf<CounterFeature>`.
        Stores can be constructed by providing the initial state you want the feature to begin in,
        as well as a trailing closure that specifies the reducer that powers the feature.
        
        다음으로 실제로 기능을 실행해보겠습니다. 프리뷰부터 시작하겠습니다. 이를 위해 `CounterView`를 
        구성할 것이며, 이를 위해서는 `StoreOf<CounterFeature>`를 구성해야 합니다. Store는 기능이 
        시작될 초기 상태와 기능을 구동하는 리듀서를 지정하는 후행 클로저를 제공하여 구성할 수 있습니다.
        
        이제 프리뷰를 실행하여 "+" 및 "-" 버튼을 탭하면 실제로 UI에 표시되는 카운트가 변경되는 것을 
        확인할 수 있습니다.
        
        @Code(name: "CounterFeature.swift", file: 01-01-02-code-0005.swift, reset: true) {
          @Video(source: "01-02-video-0005.mp4")
        }
      }
      
      Before moving onto the next section, let's quickly show off a super power of the Composable
      Architecture. Because all of the feature's logic and behavior are contained in the reducer,
      we can run the preview with a completely different reducer to alter how it executes.
      
      다음 섹션으로 넘어가기 전에, Composable Architecture의 특별한 능력을 빠르게 보여드리겠습니다. 
      기능의 모든 로직과 동작이 리듀서에 포함되어 있기 때문에, 실행 방식을 변경하기 위해 완전히 다른 
      리듀서로 프리뷰를 실행할 수 있습니다.
      
      @Step {  
        For example, in the preview, comment out the `CounterFeature` reducer and the store will be
        given a reducer that performs no state mutations or effects. This allows us to preview the
        design of the feature without worrying about any of its logic or behavior.
        
        예를 들어, 프리뷰에서 `CounterFeature` 리듀서를 주석 처리하면 상태 변경이나 이펙트를 수행하지 
        않는 리듀서가 store에 제공됩니다. 이를 통해 로직이나 동작에 대한 걱정 없이 기능의 디자인을 
        미리 볼 수 있습니다.
        
        > Note: Notice that the video demonstrates that tapping the buttons does not cause
        > the count to increase or decrease. That is because we are using the empty reducer in the 
        > preview.
        
        > 참고: 비디오에서 버튼을 탭해도 카운트가 증가하거나 감소하지 않는 것을 볼 수 있습니다. 
        > 이는 프리뷰에서 빈 리듀서를 사용하고 있기 때문입니다.
        
        @Code(name: "CounterFeature.swift", file: 01-01-02-code-0006.swift) {
          @Video(source: "01-02-video-0006.mp4")
        }
      }
      
      @Step {  
        Before moving on let's be sure to bring back the `CounterFeature` reducer in the preview,
        otherwise it will continue to be inert with our next explorations.
        
        계속 진행하기 전에 프리뷰에서 `CounterFeature` 리듀서를 다시 활성화하도록 하겠습니다. 
        그렇지 않으면 다음 탐색에서도 계속 비활성 상태로 남아있을 것입니다.
        
        @Code(name: "CounterFeature.swift", file: 01-01-02-code-0007.swift)
      }
      
      That is all there is to implementing a basic feature in the Composable Architecture. The
      feature is of course very simple, and doesn't involve anything interesting like side effects
      (which will be the topic of <doc:01-02-AddingSideEffects>), but before any of that let's see
      how to integrate this feature into an application.
      
      이것이 Composable Architecture에서 기본적인 기능을 구현하는 전부입니다. 물론 이 기능은 매우 
      단순하며, 사이드 이펙트와 같은 흥미로운 요소는 포함되어 있지 않습니다(이는 <doc:01-02-AddingSideEffects>의 
      주제가 될 것입니다). 하지만 그전에 이 기능을 애플리케이션에 통합하는 방법을 살펴보겠습니다.
    }
  }
  
  @Section(title: "Integrating into the app") {
    @ContentAndMedia {
      We have now integrated our Composable Architecture feature into a SwiftUI view and we've been
      able to run it in the preview. Next we need to figure out how to run the feature in the full
      application by altering its entry point. This will allow us to run the feature in a simulator
      or on a device.
      
      이제 Composable Architecture 기능을 SwiftUI 뷰에 통합하고 프리뷰에서 실행할 수 있게 되었습니다. 
      다음으로는 진입점을 변경하여 전체 애플리케이션에서 기능을 실행하는 방법을 알아보겠습니다. 
      이를 통해 시뮬레이터나 실제 기기에서 기능을 실행할 수 있게 됩니다.
    }
    @Steps {
      @Step {
        By default the entry point of your application is probably in a file called App.swift
        and looks something like this code.
        
        기본적으로 애플리케이션의 진입점은 App.swift라는 파일에 있을 것이며 다음과 같은 코드처럼 보일 것입니다.
        
        @Code(name: "App.swift", file: 01-01-03-code-0001.swift) 
      }
      @Step {
        We will change the entry point of the application so that it constructs a `CounterView`
        and provides a store, just as we did in the preview.
        
        프리뷰에서 했던 것처럼 `CounterView`를 구성하고 store를 제공하도록 애플리케이션의 진입점을 
        변경하겠습니다.
        
        @Code(name: "App.swift", file: 01-01-03-code-0002.swift) 
      }
      @Step {
        It is important to note that the `Store` that powers the application should only be created
        a single time. For most applications it should be sufficient to create it directly in the
        `WindowGroup` at the root of the scene. But, it can also be held as a static variable
        and then provided in the scene.
        
        애플리케이션을 구동하는 `Store`는 단 한 번만 생성되어야 한다는 점을 주목해야 합니다. 
        대부분의 애플리케이션에서는 씬의 루트에 있는 `WindowGroup`에서 직접 생성하는 것으로 충분합니다. 
        하지만 정적 변수로 유지하고 씬에서 제공할 수도 있습니다.
        
        @Code(name: "App.swift", file: 01-01-03-code-0003.swift) 
      }
      
      We can demonstrate another super power of the Composable Architecture. Reducers have a
      method called `_printChanges` that is similar to a tool that SwiftUI provides. When used it 
      will print every action that the reducer processes to the console, and it will print how the
      state changed after processing the  action. The method will also go through great lengths to
      collapse the state difference to a compact form. This includes not displaying nested state if
      it hasn't changed, and not showing elements in collections that haven't changed.
      
      Composable Architecture의 또 다른 특별한 능력을 보여드리겠습니다. 리듀서에는 SwiftUI가 제공하는 
      도구와 유사한 `_printChanges`라는 메서드가 있습니다. 이를 사용하면 리듀서가 처리하는 모든 액션을 
      콘솔에 출력하고, 액션을 처리한 후 상태가 어떻게 변경되었는지 출력합니다. 이 메서드는 상태 차이를 
      간단한 형태로 축소하기 위해 많은 노력을 기울입니다. 여기에는 변경되지 않은 중첩 상태를 표시하지 않고, 
      변경되지 않은 컬렉션의 요소를 표시하지 않는 것이 포함됩니다.
      
      @Step {
        Update the entry point of the application to invoke
        `_printChanges(_:)` on the reducer.
        
        리듀서에서 `_printChanges(_:)`를 호출하도록 애플리케이션의 진입점을 업데이트합니다.
        
        @Code(name: "App.swift", file: 01-01-03-code-0004.swift)
      }
      @Step {
        Now when you run the application in the simulator and tap the "+" and "-" buttons a few
        times you should see logs printed to the console showing you exactly what is happening.
        
        이제 시뮬레이터에서 애플리케이션을 실행하고 "+" 및 "-" 버튼을 몇 번 탭하면 정확히 어떤 일이 
        일어나고 있는지 보여주는 로그가 콘솔에 출력되는 것을 볼 수 있습니다.
        
        @Image(source: "01-03-image-0005.jpg")
      }
    }
  }
}
