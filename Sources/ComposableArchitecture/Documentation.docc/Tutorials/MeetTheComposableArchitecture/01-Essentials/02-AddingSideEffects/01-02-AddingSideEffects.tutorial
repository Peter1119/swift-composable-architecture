@Tutorial(time: 30) {
  @Intro(title: "Adding side effects") {
    Learn how to communicate with the outside world in your features, and feed data from the outside
    back into your feature.
    
    기능에서 외부 세계와 통신하고 외부의 데이터를 기능으로 다시 피드백하는 방법을 배워보겠습니다.
  }
  
  @Section(title: "What is a side effect?") {
    @ContentAndMedia {
      Side effects are by far the most important aspect of feature development. They are what allow
      us to communicate with the outside world, such as making API requests, interacting with file 
      systems, and performing time-based asynchrony. Without them, our applications could not do
      anything of real value for our users.
      
      사이드 이펙트는 기능 개발에서 가장 중요한 측면입니다. API 요청, 파일 시스템과의 상호 작용, 
      시간 기반 비동기 작업 수행과 같이 외부 세계와 통신할 수 있게 해줍니다. 이것 없이는 우리의 
      애플리케이션이 사용자에게 실질적인 가치를 제공할 수 없을 것입니다.
      
      > 참고:
      > "사이드 이펙트(Side Effect)"라는 용어는 프로그래밍에서 종종 부정적인 의미로 받아들여지곤 합니다. 
      > 이는 예측하지 못한 부작용이나 버그를 연상시키기 때문입니다. 하지만 Composable Architecture에서 
      > 이 용어는 의도적으로 선택되었으며, "주요 로직 외에 추가로 발생하는 효과"라는 중립적이고 
      > 기술적인 의미로 사용됩니다. 
      >
      > 예를 들어, API 호출, 파일 저장, 타이머 설정 등은 모두 애플리케이션의 핵심 비즈니스 로직 
      > "옆에서(side)" 발생하는 "효과(effect)"입니다. 이러한 사이드 이펙트들은 적절히 관리되고 
      > 추적 가능한 방식으로 처리될 때, 오히려 애플리케이션의 기능을 풍부하게 만들고 사용자 경험을 
      > 향상시키는 필수적인 요소가 됩니다.

      However, side effects are also the most complex part of our features. State mutations are 
      simple processes. If you run the reducer with the same piece of state and same action, you will
      always get the same result. But effects are susceptible to the vagaries of the outside world, 
      such as network connectivity, disk permissions, and more. Each time you run an effect, you
      can get back a completely different answer.
      
      하지만 사이드 이펙트는 우리 기능의 가장 복잡한 부분이기도 합니다. 상태 변경은 단순한 프로세스입니다. 
      동일한 상태와 동일한 액션으로 리듀서를 실행하면 항상 동일한 결과를 얻습니다. 하지만 이펙트는 
      네트워크 연결, 디스크 권한 등 외부 세계의 변화에 영향을 받습니다. 이펙트를 실행할 때마다 
      완전히 다른 응답을 받을 수 있습니다.
      
      Let's start by seeing why we can't simply perform effectful work directly in our 
      ``ComposableArchitecture/Reducer`` conformances, and then we will see what tools the
      library provides for performing effects.
      
      먼저 ``ComposableArchitecture/Reducer`` 구현에서 직접 이펙트 작업을 수행할 수 없는 이유를 
      살펴보고, 그 다음 라이브러리가 이펙트를 수행하기 위해 제공하는 도구들을 살펴보겠습니다.
    }
    
    @Steps {
      @Step {
        Let's add a new bit of functionality to the counter feature we built in 
        <doc:01-01-YourFirstFeature>. We will add a button that when tapped makes a network request to
        fetch a fact about the number that is currently displayed.
        
        <doc:01-01-YourFirstFeature>에서 만든 카운터 기능에 새로운 기능을 추가해보겠습니다. 
        탭하면 현재 표시된 숫자에 대한 정보를 가져오기 위해 네트워크 요청을 하는 버튼을 추가할 것입니다.
        
        There are two ways you can approach this. Sometimes people like to work on the reducer
        first, and then the view. Others like to start with the view, which is what we will do now.
        We have added an additional button to the bottom of `CounterView`, and when it is tapped we
        will send a `factButtonTapped` action, which does not yet exist in the counter domain, but
        will soon.

        이를 접근하는 방법에는 두 가지가 있습니다. 어떤 사람들은 리듀서를 먼저 작업한 다음 뷰를 
        작업하는 것을 선호하고, 다른 사람들은 뷰부터 시작하는 것을 선호합니다. 우리는 지금 후자의 
        방법을 사용할 것입니다. `CounterView` 하단에 추가 버튼을 추가했고, 이 버튼을 탭하면 
        `factButtonTapped` 액션을 보낼 것입니다. 이 액션은 아직 카운터 도메인에 존재하지 않지만 
        곧 추가할 것입니다.

        > 참고:
        > "도메인(Domain)"이라는 용어는 소프트웨어 개발에서 특정 문제 영역이나 업무 영역을 의미합니다. 
        > Composable Architecture에서 도메인은 애플리케이션의 핵심 비즈니스 로직과 규칙을 포함하는 
        > 독립적인 단위를 나타냅니다.
        >
        > 예를 들어, 카운터 기능의 도메인에는 카운터의 상태(count 값), 가능한 액션(증가/감소), 
        > 그리고 이러한 액션에 따른 상태 변화 규칙이 포함됩니다. 이러한 도메인 로직은 UI나 데이터 
        > 저장소와 같은 외부 관심사와 분리되어 있어, 코드의 유지보수성과 테스트 용이성을 높여줍니다.
        
        @Code(name: "CounterFeature.swift", file: 01-02-01-code-0001.swift, previousFile: 01-02-01-code-0001-previous.swift) {
          @Image(source: "02-01-image-0001")
        }
      }
      
      @Step {
        We will also add a progress view at the bottom to display while we are loading the fact,
        and we will unwrap a bit of optional state to display the fact. We are using the
        `isLoading` and `fact` state to accomplish this, neither of which exists in the counter 
        feature yet, but will soon.
        
        또한 정보를 로딩하는 동안 표시할 프로그레스 뷰를 하단에 추가하고, 정보를 표시하기 위해 
        옵셔널 상태를 언래핑할 것입니다. 이를 위해 `isLoading`과 `fact` 상태를 사용할 것입니다. 
        아직 카운터 기능에는 존재하지 않지만 곧 추가할 것입니다.
        
        @Code(name: "CounterFeature.swift", file: 01-02-01-code-0002.swift)
      }
      
      That is all it takes for the view. The code is not yet compiling because we are using state
      and actions that don't yet exist, so let's fix those errors in the reducer.
      
      뷰에 필요한 것은 이게 전부입니다. 아직 존재하지 않는 상태와 액션을 사용하고 있기 때문에 
      코드는 컴파일되지 않습니다. 리듀서에서 이러한 오류들을 수정해보겠습니다.
      
      @Step {
        Recall that this is what our `CounterFeature` reducer looks like so far, as built in
        <doc:01-01-YourFirstFeature>. It has a simple `State` and `Action` type, and the reducer
        simply decrements or increments the `count` state depending on which action is sent.
        
        <doc:01-01-YourFirstFeature>에서 구축한 `CounterFeature` 리듀서가 지금까지 어떤 모습인지 
        상기해보겠습니다. 간단한 `State`와 `Action` 타입이 있고, 리듀서는 전송된 액션에 따라 
        `count` 상태를 감소시키거나 증가시키기만 합니다.
        
        @Code(name: "CounterFeature.swift", file: 01-02-01-code-0003.swift, reset: true)
      }
      
      @Step {
        Let's add the additional state and actions that have been dictated to us by the view.
        We know we need some `fact` and `isLoading` state, and we need a `factButtonTapped` action.
        We can also implement that action in the reducer by flipping `isLoading` to `true`, and 
        we'll clear the `fact` state when any button is tapped. And finally, we will return `.none` 
        just like we did in all the other cases.
        
        뷰에서 요구한 추가 상태와 액션들을 추가해보겠습니다. `fact`와 `isLoading` 상태가 필요하고, 
        `factButtonTapped` 액션이 필요하다는 것을 알고 있습니다. 리듀서에서 이 액션을 구현하여 
        `isLoading`을 `true`로 변경하고, 버튼이 탭될 때마다 `fact` 상태를 초기화할 수 있습니다. 
        그리고 마지막으로 다른 모든 경우와 마찬가지로 `.none`을 반환할 것입니다.

        @Code(name: "CounterFeature.swift", file: 01-02-01-code-0004.swift)
      }
      
      @Step {
        Now the question is: how can we perform a side-effect? We will be using 
        [numbersapi.com][numbersapi.com] to fetch a fact for the state's current count. We might
        hope we can just use `URLSession` directly in the reducer to perform some async work, but
        unfortunately that is not allowed. 
        
        이제 질문은: 어떻게 사이드 이펙트를 수행할 수 있을까요? 상태의 현재 카운트에 대한 정보를 
        가져오기 위해 [numbersapi.com][numbersapi.com]을 사용할 것입니다. 비동기 작업을 수행하기 위해 
        리듀서에서 직접 `URLSession`을 사용할 수 있기를 바랄 수도 있지만, 안타깝게도 이는 허용되지 않습니다.
        
        [numbersapi.com]: http://www.numbersapi.com
        
        @Code(name: "CounterFeature.swift", file: 01-02-01-code-0005.swift)
      }
      
      The Composable Architecture separates the simple, pure transformations of state from the 
      complex, messy side effects. It is one of the core tenets of the library and there are a lot 
      of benefits to doing so. Luckily for us, the library gives us a tool that is appropriate
      for executing side effects. It is called ``ComposableArchitecture/Effect`` and it is
      explored in the next section.
      
      Composable Architecture는 단순하고 순수한 상태 변환을 복잡하고 혼란스러운 사이드 이펙트와 
      분리합니다. 이는 라이브러리의 핵심 원칙 중 하나이며 이렇게 하는 데는 많은 이점이 있습니다. 
      다행히도 라이브러리는 사이드 이펙트를 실행하기에 적합한 도구를 제공합니다. 이것은 
      ``ComposableArchitecture/Effect``라고 불리며 다음 섹션에서 살펴볼 것입니다.
    }
  }
  
  @Section(title: "Performing a network request") {
    @ContentAndMedia {
      Now that we understand what a side-effect is and why they cannot be performed directly in
      a reducer, let's see how to fix the code we wrote above. 
      
      이제 사이드 이펙트가 무엇이고 왜 리듀서에서 직접 수행할 수 없는지 이해했으니, 위에서 작성한 
      코드를 어떻게 수정할 수 있는지 살펴보겠습니다.
      
      The Composable Architecture bakes the notion of "effect" directly into the definition of 
      ``ComposableArchitecture/Reducer``. After a reducer processes an action by mutating
      state, it can return something called an ``ComposableArchitecture/Effect``, which 
      represents an asynchronous unit that is run by the ``ComposableArchitecture/Store``. Effects
      are what can communicate with outside systems and then feed data from the outside back into 
      the reducer.
      
      Composable Architecture는 "이펙트"의 개념을 ``ComposableArchitecture/Reducer``의 정의에 
      직접 포함시킵니다. 리듀서가 상태를 변경하여 액션을 처리한 후, ``ComposableArchitecture/Effect``라고 
      하는 것을 반환할 수 있는데, 이는 ``ComposableArchitecture/Store``에 의해 실행되는 비동기 
      단위를 나타냅니다. 이펙트는 외부 시스템과 통신하고 외부의 데이터를 다시 리듀서로 피드백할 수 있는 
      것입니다.
      
      This is exactly what we want to do for our number fact effect. We want to make a network 
      request, and then feed that information back into the reducer. So, let's get started.
      
      이것이 바로 우리가 숫자 정보 이펙트에서 하고자 하는 것입니다. 네트워크 요청을 하고, 그 정보를 
      다시 리듀서로 피드백하고자 합니다. 그럼 시작해보겠습니다.
    }
    
    @Steps {
      @Step {
        The primary way one constructs an ``ComposableArchitecture/Effect`` is via the static method 
        ``ComposableArchitecture/Effect/run(priority:operation:catch:fileID:filePath:line:column:)``. This provides
        you with an asynchronous context to perform any kind of work you want, as well as a handle
        (`send`) for sending actions back into the system.
        
        ``ComposableArchitecture/Effect``를 구성하는 주된 방법은 
        ``ComposableArchitecture/Effect/run(priority:operation:catch:fileID:filePath:line:column:)`` 
        정적 메서드를 통하는 것입니다. 이는 원하는 모든 종류의 작업을 수행할 수 있는 비동기 컨텍스트와 
        시스템으로 액션을 다시 보내기 위한 핸들(`send`)을 제공합니다.
        
        @Code(name: "CounterFeature.swift", file: 01-02-02-code-0001.swift, previousFile: 01-02-01-code-0005.swift)
      }
      
      @Step {
        The trailing closure of `.run` is the perfect place to perform our network request to fetch
        data from [numbersapi.com][numbersapi.com] and turn it into a string.
        
        `.run`의 후행 클로저는 [numbersapi.com][numbersapi.com]에서 데이터를 가져와 문자열로 
        변환하는 네트워크 요청을 수행하기에 완벽한 장소입니다.
        
        > Tip: Unfortunately [numbersapi.com][numbersapi.com] does not offer HTTPS, so you will need 
        > to add an entry to your application's Info.plist in order to allow HTTP requests. See 
        > [this][always-allow] article for information on how to do that.
        
        > 팁: 안타깝게도 [numbersapi.com][numbersapi.com]은 HTTPS를 제공하지 않으므로, HTTP 요청을 
        > 허용하기 위해 애플리케이션의 Info.plist에 항목을 추가해야 합니다. 방법은 
        > [이 문서][always-allow]를 참조하세요.
        
        [numbersapi.com]: http://www.numbersapi.com
        [always-allow]: https://developer.apple.com/documentation/bundleresources/information_property_list/nsapptransportsecurity
                
        @Code(name: "CounterFeature.swift", file: 01-02-02-code-0002.swift)
      }
      
      @Step {
        However, it is not possible to then mutate the `state.fact` in the effect after fetching
        the data from the network. This is strictly enforced by the compiler since sendable closures
        cannot capture `inout` state. This is showing how the library chooses to separate the nice, 
        simple and pure state mutations that reducers perform from the messy, complex effects. 
        
        하지만 네트워크에서 데이터를 가져온 후 이펙트 내에서 `state.fact`를 변경하는 것은 불가능합니다. 
        이는 sendable 클로저가 `inout` 상태를 캡처할 수 없기 때문에 컴파일러에 의해 엄격하게 
        강제됩니다. 이는 라이브러리가 리듀서가 수행하는 깔끔하고 단순하며 순수한 상태 변경을 
        복잡하고 혼란스러운 이펙트와 어떻게 분리하는지를 보여줍니다.
        
        @Code(name: "CounterFeature.swift", file: 01-02-02-code-0003.swift)
      }
      
      @Step {
        In order for us to feed the information from the effect back into our reducer we need to
        introduce another action, called `factResponse`, and it will have an associated value of the
        string that is fetched from the network. Then we can send that action in the effect after
        performing the asynchronous work, and we can handle the new action by flipping `isLoading`
        back to `false` and updating the `fact` state.
        
        이펙트의 정보를 리듀서로 다시 피드백하기 위해서는 `factResponse`라는 새로운 액션을 도입해야 
        하며, 이 액션은 네트워크에서 가져온 문자열을 연관 값으로 가질 것입니다. 그런 다음 비동기 
        작업을 수행한 후 이펙트에서 해당 액션을 보낼 수 있으며, 새로운 액션을 처리하여 `isLoading`을 
        다시 `false`로 변경하고 `fact` 상태를 업데이트할 수 있습니다.
        
        > Warning: Currently we are ignoring any errors that can be thrown by `URLSession`. In a 
        > more complete application you would want to leverage ``ComposableArchitecture/TaskResult``
        > to have errors fed back into the reducer so that you can react appropriately.
        
        > 경고: 현재는 `URLSession`에서 발생할 수 있는 오류를 무시하고 있습니다. 더 완성도 높은 
        > 애플리케이션에서는 ``ComposableArchitecture/TaskResult``를 활용하여 오류를 리듀서로 
        > 피드백하고 적절하게 대응할 수 있도록 해야 합니다.
        
        @Code(name: "CounterFeature.swift", file: 01-02-02-code-0004.swift)
      }
      
      @Step {
        We can now run the application in the simulator or in a preview and see that the feature
        works as we expect. We can count up to a number, tap the "Fact" button, and a moment
        later a fact will be displayed at the bottom of the UI.
        
        이제 시뮬레이터나 프리뷰에서 애플리케이션을 실행하고 기능이 예상대로 작동하는 것을 확인할 수 
        있습니다. 숫자를 올리고, "Fact" 버튼을 탭하면 잠시 후 UI 하단에 해당 숫자에 대한 정보가 
        표시됩니다.
        
        @Code(name: "CounterFeature.swift", file: 01-02-02-code-0005.swift) {
          @Video(source: "02-02-video-0005")
        }
      }
    }
  }
    
  @Section(title: "Managing a timer") {
    @ContentAndMedia {
      Network requests are probably one of the most common types of side effects, but they are not
      the only kind. Let's add a new bit of functionality to our counter feature. We will add 
      another button that when tapped starts a one second repeating timer, and for each tick we will 
      increment the state's `count` by one.
      
      네트워크 요청은 아마도 가장 일반적인 유형의 사이드 이펙트일 것입니다만, 유일한 종류는 아닙니다. 
      카운터 기능에 새로운 기능을 추가해보겠습니다. 탭하면 1초마다 반복되는 타이머를 시작하는 
      버튼을 추가하고, 각 틱마다 상태의 `count`를 1씩 증가시킬 것입니다.
    }
    
    @Steps {
      @Step {
        We will start with the view layer, just as we did before. We will add a button that either
        displays "Start timer" or "Stop timer", depending on some `isTimerRunning` state, and
        when tapped we will send a `toggleTimerButtonTapped` action. That's all it takes for the
        view.
        
        이전과 마찬가지로 뷰 레이어부터 시작하겠습니다. `isTimerRunning` 상태에 따라 "Start timer" 
        또는 "Stop timer"를 표시하는 버튼을 추가하고, 탭하면 `toggleTimerButtonTapped` 액션을 
        보낼 것입니다. 뷰에 필요한 것은 이게 전부입니다.
        
        > Note: The `isTimerRunning` state and `toggleTimerButtonTapped` actions do not yet exist. 
        > We will add them in the next step.
        
        > 참고: `isTimerRunning` 상태와 `toggleTimerButtonTapped` 액션은 아직 존재하지 않습니다. 
        > 다음 단계에서 추가할 것입니다.
        
        @Code(name: "CounterFeature.swift", file: 01-02-03-code-0001.swift, previousFile: 01-02-01-code-0002.swift)
      }
      
      @Step {
        Next we will update the reducer by adding the `isTimerRunning` state, a new 
        `toggleTimerButtonTapped` action, and stubbing in the basics of the logic for the new 
        action. We know we will want to execute some asynchronous work, in particular a timer, so
        we have gone ahead and opened up a `run` effect.
        
        다음으로 리듀서를 업데이트하여 `isTimerRunning` 상태, 새로운 `toggleTimerButtonTapped` 
        액션을 추가하고, 새로운 액션에 대한 기본적인 로직을 구현할 것입니다. 특히 타이머와 같은 
        비동기 작업을 실행하고 싶을 것이므로, `run` 이펙트를 미리 열어두었습니다.
        
        @Code(name: "CounterFeature.swift", file: 01-02-03-code-0002.swift, previousFile: 01-02-02-code-0005.swift)
      }
      
      @Step {
        Inside the `run` effect we can emulate a very crude timer by starting an infinite `while`
        loop and sleeping for one second inside the loop. This is not the best way to construct a
        timer as it allows for drift to occur, but it will be fine for our purposes right now.
        
        `run` 이펙트 내에서 무한 `while` 루프를 시작하고 루프 내에서 1초 동안 대기하는 방식으로 
        매우 기본적인 타이머를 구현할 수 있습니다. 시간 지연이 발생할 수 있기 때문에 타이머를 구현하는 
        가장 좋은 방법은 아니지만, 현재 우리의 목적에는 충분할 것입니다.
        
        @Code(name: "CounterFeature.swift", file: 01-02-03-code-0003.swift)
      }
      
      @Step {
        In order to react to each timer tick in the reducer we need to introduce a new action,
        `timerTick`, that will be sent after each `Task.sleep`. And it's in that action we will
        increment the state's `count`.
        
        리듀서에서 각 타이머 틱에 반응하기 위해서는 각 `Task.sleep` 후에 전송될 새로운 액션인 
        `timerTick`을 도입해야 합니다. 그리고 이 액션에서 상태의 `count`를 증가시킬 것입니다.
        
        @Code(name: "CounterFeature.swift", file: 01-02-03-code-0004.swift)
      }
      
      However, there is a bug. If we tap the "Start timer" button to start the timer, and then tap
      "Stop timer", we will see that the timer did not stop.
      
      하지만 버그가 있습니다. "Start timer" 버튼을 탭하여 타이머를 시작한 다음 "Stop timer"를 
      탭하면, 타이머가 멈추지 않는 것을 볼 수 있습니다.
      
      @Step {
        To fix the bug, we can leverage a powerful feature of the Composable Architecture known as 
        "effect cancellation". We can mark any effect as cancellable using the 
        ``ComposableArchitecture/Effect/cancellable(id:cancelInFlight:)`` method by providing
        an ID, and then at a later time we can cancel that effect using 
        ``ComposableArchitecture/Effect/cancel(id:)``.
        
        이 버그를 수정하기 위해, Composable Architecture의 강력한 기능인 "이펙트 취소"를 활용할 수 
        있습니다. ``ComposableArchitecture/Effect/cancellable(id:cancelInFlight:)`` 메서드에 ID를 
        제공하여 이펙트를 취소 가능하도록 표시할 수 있으며, 나중에 ``ComposableArchitecture/Effect/cancel(id:)``를 
        사용하여 해당 이펙트를 취소할 수 있습니다.
        
        @Code(name: "CounterFeature.swift", file: 01-02-03-code-0005.swift)
      }
      
      @Step {
        Now the feature works as we expect. We can start the timer, wait a few seconds to see it
        count up, and then we can stop the timer. This shows how to manage a long-living effect,
        including how to cancel effects.
        
        이제 기능이 예상대로 작동합니다. 타이머를 시작하고, 몇 초 동안 카운트가 올라가는 것을 
        확인한 다음, 타이머를 멈출 수 있습니다. 이는 이펙트 취소를 포함하여 장기 실행 이펙트를 
        관리하는 방법을 보여줍니다.
        
        @Code(name: "CounterFeature.swift", file: 01-02-03-code-0006.swift) {
          @Video(source: "03-03-video-0006")
        }
      }
    }
  }
}
